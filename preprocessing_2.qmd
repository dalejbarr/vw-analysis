# Mapping gaze to areas of interest

At this point we have epoched our eyetracking data, resulting in the `edat-epoched.rds` file which looks like so:

```{r}
#| include: false
library("tidyverse")
source("codebook.R")
```


```{r}
#| label: show-epoched-eyedata
#| echo: true
#| message: false

library("tidyverse")

edat <- read_rds("data-derived/edat-epoched.rds")

edat
```

We know **when** people are looking relative to the disambiguation point for the trial (`f_c`), and we know **where** they are looking, because we have the (x, y) coordinates. But we yet don't know **which image they are looking at** on each frame. So we have to map the two-dimensional gaze coordinates onto the coordinates of the images that was displayed on a given trial.

![](img/screens.png)

We know what pictures were shown on each trial from the data in the `screens` table (from `data-raw/screens.csv`).

```{r}
#| label: read-screens
screens <- read_csv("data-raw/screens.csv",
                    col_types = "iicc")
```

The table looks like so.

```{r}
#| echo: false
screens
```


```{r}
#| label: screens-codebook
#| echo: false
screens_cb %>%
  knitr::kable()
```

The `loc` variable is a number that refers to the four quadrants of the screen where the images appeared. We can get the pixel coordinates representing the top left and bottom right corners of each rectangle from the `locations` table.

```{r}
#| label: load-locations
locations <- read_csv("data-raw/locations.csv",
                      col_types = "iiiii")
```

```{r}
#| echo: false
locations
```

```{r}
#| label: locations-codebook
#| echo: false
locations_cb %>% knitr::kable()
```

## Image locations for each trial

### Activity: Get coordinates

We want to combine the data from `screens` and `locations` with trial info to create the following table, which we will use later to figure out what image was being looked at (if any) on each frame of each trial. Save this information in a table named `aoi` (for **A**rea **O**f **I**nterest). You might need to reference @sec-datastruct to see how to get `sub_id` and `t_id` into the table.

```{r}
#| label: combine-coords-result
#| echo: false
trials <- read_csv("data-raw/trials.csv",
                   col_types = "iiiiii")

stimuli <- read_csv("data-raw/stimuli.csv",
                    col_types = "iiciccc")

aoi <- trials %>%
  select(sub_id, t_id, iv_id) %>%
  inner_join(stimuli, "iv_id") %>%
  inner_join(screens, "s_id") %>%
  inner_join(locations, "loc") %>%
  select(sub_id, t_id, s_id, role, x1, y1, x2, y2)

aoi
```

:::{.callout-important collapse="true"}
#### Solution

We can get `sub_id` and `t_id` from `trials`. But to get there from `screens`, we need to get the item version (`iv_id`) from `stimuli`. We can connect `screens` to `stimuli` through the screen id (`s_id`).

```{r}
#| label: combine-coords
#| eval: false
trials <- read_csv("data-raw/trials.csv",
                   col_types = "iiiiii")

stimuli <- read_csv("data-raw/stimuli.csv",
                    col_types = "iiciccc")

aoi <- trials %>%
  select(sub_id, t_id, iv_id) %>%
  inner_join(stimuli, "iv_id") %>%
  inner_join(screens, "s_id") %>%
  inner_join(locations, "loc") %>%
  select(sub_id, t_id, s_id, role, x1, y1, x2, y2)
```

As a check, we should have four times the number of rows as `trials` (`r nrow(trials)`), because there should be four areas of interest for each trial. We can use `stopifnot()` to make our script terminate if this condition is not satisfied.

```{r}
#| label: check-aoi

stopifnot( nrow(aoi) == 4 * nrow(trials) )
```

:::

## Identifying frames where the gaze cursor is within an AOI

What we need to do now is look at the (`x`, `y`) coordinates in `edat` and see if they fall within the bounding box for each image in the `aoi` table for the corresponding trial. 

### Activity: Create `frames_in`

There are different ways to accomplish this task, but an effective strategy is just to join the eyedata (`edat`) to the `aoi` table and retain any frames where the `x` coordinate of the eye gaze is within the `x1` and `x2` coordinates of the rectangle, and the `y` coordinate is within the `y1` and `y2` coordinates. Because our AOIs do not overlap, the gaze can only be within a single AOI at a time.

Name the resulting table `frames_in`.

:::{.callout-tip collapse="true"}
#### Hint

Some code to get you started.

```{r}
#| label: frames-in-starter
#| eval: false
edat %>%
  inner_join(aoi, c("sub_id", "t_id")) # %>%
  ## filter(...) 
```

:::

```{r}
#| label: frames-in-result
#| echo: false
frames_in <- edat %>%
  inner_join(aoi, c("sub_id", "t_id")) %>%
  filter(x >= x1, x <= x2,
         y >= y1, y <= y2) %>%
  select(sub_id, t_id, f_c, role)

frames_in
```

:::{.callout-important collapse="true"}
#### Solution

```{r}
#| label: frames-in
#| eval: false
frames_in <- edat %>%
  inner_join(aoi, c("sub_id", "t_id")) %>%
  filter(x >= x1, x <= x2,
         y >= y1, y <= y2) %>%
  select(sub_id, t_id, f_c, role)
```

:::

### Activity: Create `frames_out`

Create a table `frames_out` containing only those frames from `edat` where the gaze fell outside of any of the four image regions, and label those with the role `(blank)`. Use the `anti_join()` function from `dplyr` to do so.

The resulting table should have the format below.

```{r}
#| label: frames-out-result
#| echo: false
frames_out <- edat %>% 
  select(sub_id, t_id, f_c) %>%
  anti_join(frames_in, c("sub_id", "t_id", "f_c")) %>%
  mutate(role = "(blank)")

frames_out
```

:::{.callout-tip collapse="true"}
#### Hint: Show me an example of `anti_join()`

```{r}
#| label: anti-join-example
table_x <- tibble(letter = c("A", "B", "C", "D", "E"),
                  number = c(1, 2, 3, 4, 5))

table_x

table_y <- tibble(letter = c("C", "D", "E"),
                  number = c(3, 4, 99))

table_y

## which rows in table_x are not in table_y?
anti_join(table_x, table_y, c("letter", "number"))
```

:::

:::{.callout-important collapse="true"}
#### Solution

```{r}
#| label: frames-out
#| eval: false
frames_out <- edat %>% 
  select(sub_id, t_id, f_c) %>%
  anti_join(frames_in, c("sub_id", "t_id", "f_c")) %>%
  mutate(role = "(blank)")
```

A good test to do at this point is to make sure that all `r format(nrow(edat), big.mark = ",")` rows of `edat` have been assigned to either `frames_in` or `frames_out`.

```{r}
#| label: test-frames
stopifnot( nrow(edat) == (nrow(frames_in) + nrow(frames_out)) ) # TRUE
```

:::

### Activity: Combine into `pog`

Combine `frames_in` and `frames_out` into a single table by concatenating the rows. Sort the rows so by `sub_id`, `t_id`, and `f_c`, and convert `role` into type `factor` with levels in this order: `target`, `critical`, `existing`, `novel`, and `(blank)`. The resulting table should be called `pog` and have the format below.

```{r}
#| label: pog-result
#| echo: false
pog <- bind_rows(frames_in,
                 frames_out) %>%
  arrange(sub_id, t_id, f_c) %>%
  mutate(role = fct_relevel(role, c("target", "critical", 
                                    "existing", "novel")))

pog
```

:::{.callout-tip collapse="true"}
#### How do I concatenate two tables?

Use the `bind_rows()` function from **`{dplyr}`**.
:::

:::{.callout-important collapse="true"}
#### Solution

```{r}
#| label: pog
#| echo: false
pog <- bind_rows(frames_in,
                 frames_out) %>%
  arrange(sub_id, t_id, f_c) %>%
  mutate(role = fct_relevel(role, c("target", "critical", 
                                    "existing", "novel")))
```

We might want to check that `role` has been defined properly.

```{r}
#| label: check-role
pog %>%
  pull(role) %>%
  levels()
```

:::

## Dealing with trial dropouts

```{r}
#| echo: false
.rn <- function(x) {
  if (x <= 10L) {
    c("one", "two", "three", "four", "five", "six",
              "seven", "eight", "nine", "ten")[x]
  } else {
    x
  }
}

.plot_s3 <- function(x) {
  x %>%
    filter(sub_id == 3L, t_id < 10L) %>%
    mutate(t_id = factor(t_id)) %>%
    ggplot(aes(f_c, t_id)) +
    geom_vline(xintercept = 0) +
    geom_point(aes(color = role, shape = role)) +
    theme_minimal() +
    theme(legend.position = "top") +
    scale_y_discrete(labels = .t_ids)
}

.first_frame <- pog %>%
  group_by(sub_id, t_id) %>%
  summarize(f = min(f_c), .groups = "drop") %>%
  pull() %>%
  unique()

.final_frame <- pog %>%
  summarize(f = max(f_c)) %>%
  pull()

.pog_s3 <- pog %>%
  filter(sub_id == 3L, t_id < 10L) %>%
  mutate(t_id = factor(t_id))

.t_ids <- .pog_s3 %>% distinct(t_id) %>% pull() %>% as.character()
names(.t_ids) <- .t_ids

.pog_n <- .rn(length(.t_ids))
```

We want to be able to use the data in `pog` to calculate probabilities of gazing at regions over time. However, we are not ready to do this yet.

If we look at the first `r .pog_n` trials from subject 3, we can see that there is a problem, because the trials end at different times, due to variation in response time. If we plot the resulting data, we will have fewer and fewer data points as we progress through the trial.

```{r}
#| label: dropout-fig
#| fig-width: 8
#| fig-height: 2
#| echo: false
.plot_s3(pog)
```

A solution to this is to make each time series "cumulative to selection", which means padding frames after the trial ends with artificial looks to the object that was selected. In other words, we pretend that the subject remained fixated on the selected object after clicking.

But before we do this, we should double check that trials also **start** at the same frame (`r .first_frame`). Once we pass this sanity check we can pad frames at the end.

```{r}
#| label: check-start
start_frame <- edat %>% 
  group_by(sub_id, t_id) %>% 
  summarise(min_f_c = min(f_c), # get the minimum frame per trial
            .groups = "drop") %>%
  pull(min_f_c) %>%
  unique() # what are the unique values?

## if the value is the same for every trial, there should be
## just one element in this vector
stopifnot( length(start_frame) == 1L )

start_frame
```

### Activity: Selected object

Which object was selected on each trial? The `trials` table tells us which location was clicked (1, 2, 3, 4) but not which object. We need to figure out which object was clicked by retrieving that information from the `screens` table. The result should have the format below.

```{r}
#| label: selected-object-format
#| echo: false
## which object was selected on each trial?
selections <- trials %>%
  inner_join(stimuli, "iv_id") %>%
  inner_join(screens, c("s_id", "resploc" = "loc")) %>%
  select(sub_id, t_id, role)

selections
```

:::{.callout-important collapse="true"}
#### Solution

```{r}
#| label: selected-object
#| eval: false
## which object was selected on each trial?
selections <- trials %>%
  inner_join(stimuli, "iv_id") %>%
  inner_join(screens, c("s_id", "resploc" = "loc")) %>%
  select(sub_id, t_id, role)
```
:::

Now that we know what object was selected, we want to pad trials up to the latest frame in the dataset, which we determined during epoching as frame `r .final_frame` (that is, `r round(.final_frame / 60, 3)` seconds after the disambiguation point).

We will use the `crossing()` function (from **`{tidyr}`**) to create a table with all combinations of the rows from `selections` with frames `f_c` from 0 to `r .final_frame`. Then, in the next activity, we will use `anti_join()` to pull out the combinations that are missing from `pog`, and use them in padding.

```{r}
#| label: crossing-trick
all_frames <- crossing(selections, tibble(f_c = 0:90))

all_frames
```

### Activity: Pad frames

Use `anti_join()` to find out which frames in `all_frames` are missing from `pog`. Concatenate these frames onto `pog`, storing the result in `pog_cts`. The resulting table should have a variable `pad` which is `FALSE` if the frame is an original one, and `TRUE` if it was added through the padding procedure. Sort the rows of `pog_cts` by `sub_id`, `t_id`, and `f_c`. The format is shown below.

```{r}
#| label: padding-format
#| echo: false
pad_frames <- all_frames %>%
  anti_join(pog, c("sub_id", "t_id", "f_c")) %>%
  mutate(pad = TRUE)

pog_cts <- bind_rows(pog %>% mutate(pad = FALSE),
          pad_frames) %>%
  arrange(sub_id, t_id, f_c)

pog_cts
```

:::{.callout-important collapse="true"}
#### Solution

```{r}
#| label: padding
#| echo: false
pad_frames <- all_frames %>%
  anti_join(pog, c("sub_id", "t_id", "f_c")) %>%
  mutate(pad = TRUE)

pog_cts <- bind_rows(pog %>% mutate(pad = FALSE),
          pad_frames) %>%
  arrange(sub_id, t_id, f_c)
```

:::

One thing that may have happened in the process above is that `role` is no longer a factor. So let's convert it back before we finish.

```{r}
#| label: to-factor
pog_cts2 <- pog_cts %>%
  mutate(role = fct_relevel(role, c("target", "critical",
                                    "existing", "novel", "(blank)")))
```

Now let's double check that the padding worked by looking again at some trials from subject 3.

```{r}
#| label: plot-padded
#| fig-width: 8
#| fig-height: 2
#| echo: false
.plot_s3(pog_cts2)
```

Looks good. Now let's save all our hard work so that we can use `pog_cts2` as a starting point for analysis.

```{r}
#| label: save-data
saveRDS(pog_cts2, "data-derived/pog_cts.rds")
```
